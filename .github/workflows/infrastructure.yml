name: Terraform

on:
  push:
    branches:
      - master
    paths:
      - 'terraform/**'
  pull_request:
    branches:
      - master
    paths:
      - 'terraform/**'


jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.13.0

      - name: Terraform Format
        id: fmt
        run: |
          cd terraform
          terraform fmt -check

      - name: Terraform Init
        id: init
        run: |
          cd terraform
          terraform init


      - name: Terraform Validate
        id: validate
        run: |
          cd terraform
          terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          cd terraform
          terraform plan -no-color -input=false | tee tfplan.txt
        working-directory: ./terraform
        env:
          PLAN_OUTPUT: ${{ steps.plan.outputs.stdout }}

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fmtOutcome = `Terraform Format: \`${{ steps.fmt.outcome }}\``
            const initOutcome = `Terraform Init: \`${{ steps.init.outcome }}\``
            const validateOutcome = `Terraform Validate: \`${{ steps.validate.outcome }}\``
            const planOutput = process.env.PLAN_OUTPUT || 'Terraform Plan output not available.'
            const planOutcome = `Terraform Plan: \`${{ steps.plan.outcome }}\``

            const body = `
            ### Terraform Workflow Results:
            ${fmtOutcome}
            ${initOutcome}
            ${validateOutcome}
            ${planOutcome}

            <details><summary>Terraform Plan Output</summary>

            \`\`\`terraform
            ${planOutput}
            \`\`\`

            </details>
            Pushed by: @${{ github.actor }}
            Action: \`${{ github.event_name }}\`
            `
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        working-directory: ./terraform

