name: "Terraform"

on:
  push:
    branches:
      - master
    paths:
      - 'terraform/**'
  pull_request:
    - master

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
           terraform_version: 0.13.0

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
#name: Terraform Infrastructure Provisioning
#
#on:
#  push:
#    branches:
#      - 'Terraform/**'
#
#jobs:
#  terraform:
#    name: Terraform Plan and Apply
#    runs-on: ubuntu-latest
#
#    steps:
#      # Step 1: Checkout the repository
#      - name: Checkout Code
#        uses: actions/checkout@v3
#
#      # Step 2: Configure AWS Credentials
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1
#
#      # Step 3: Set up Terraform
#      - name: Set up Terraform
#        uses: hashicorp/setup-terraform@v2
#        with:
#          terraform_version: 1.5.0
#
#      # Step 4: Terraform Init
#      - name: Terraform Init
#        run: |
#          cd Terraform
#          terraform init
#
#      # Step 5: Terraform Plan
#      - name: Terraform Plan
#        run: |
#          cd Terraform
#          terraform plan
#        # Step 6: Terraform Apply
#        # Uncomment the next lines to auto-apply changes in a production environment
#      - name: Terraform Apply
#        run: |
#          cd Terraform
#          terraform apply -auto-approve
